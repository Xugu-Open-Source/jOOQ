/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.kotlin.db.h2.tables.records


import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record11
import org.jooq.Row11
import org.jooq.example.kotlin.db.h2.tables.Book
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BookRecord() : UpdatableRecordImpl<BookRecord>(Book.BOOK), Record11<Int?, Int?, Int?, Int?, String?, Int?, Int?, String?, ByteArray?, Int?, LocalDateTime?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var authorId: Int?
        set(value) = set(1, value)
        get() = get(1) as Int?

    var coAuthorId: Int?
        set(value) = set(2, value)
        get() = get(2) as Int?

    var detailsId: Int?
        set(value) = set(3, value)
        get() = get(3) as Int?

    var title: String?
        set(value) = set(4, value)
        get() = get(4) as String?

    var publishedIn: Int?
        set(value) = set(5, value)
        get() = get(5) as Int?

    var languageId: Int?
        set(value) = set(6, value)
        get() = get(6) as Int?

    var contentText: String?
        set(value) = set(7, value)
        get() = get(7) as String?

    var contentPdf: ByteArray?
        set(value) = set(8, value)
        get() = get(8) as ByteArray?

    var recVersion: Int?
        set(value) = set(9, value)
        get() = get(9) as Int?

    var recTimestamp: LocalDateTime?
        set(value) = set(10, value)
        get() = get(10) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row11<Int?, Int?, Int?, Int?, String?, Int?, Int?, String?, ByteArray?, Int?, LocalDateTime?> = super.fieldsRow() as Row11<Int?, Int?, Int?, Int?, String?, Int?, Int?, String?, ByteArray?, Int?, LocalDateTime?>
    override fun valuesRow(): Row11<Int?, Int?, Int?, Int?, String?, Int?, Int?, String?, ByteArray?, Int?, LocalDateTime?> = super.valuesRow() as Row11<Int?, Int?, Int?, Int?, String?, Int?, Int?, String?, ByteArray?, Int?, LocalDateTime?>
    override fun field1(): Field<Int?> = Book.BOOK.ID
    override fun field2(): Field<Int?> = Book.BOOK.AUTHOR_ID
    override fun field3(): Field<Int?> = Book.BOOK.CO_AUTHOR_ID
    override fun field4(): Field<Int?> = Book.BOOK.DETAILS_ID
    override fun field5(): Field<String?> = Book.BOOK.TITLE
    override fun field6(): Field<Int?> = Book.BOOK.PUBLISHED_IN
    override fun field7(): Field<Int?> = Book.BOOK.LANGUAGE_ID
    override fun field8(): Field<String?> = Book.BOOK.CONTENT_TEXT
    override fun field9(): Field<ByteArray?> = Book.BOOK.CONTENT_PDF
    override fun field10(): Field<Int?> = Book.BOOK.REC_VERSION
    override fun field11(): Field<LocalDateTime?> = Book.BOOK.REC_TIMESTAMP
    override fun component1(): Int? = id
    override fun component2(): Int? = authorId
    override fun component3(): Int? = coAuthorId
    override fun component4(): Int? = detailsId
    override fun component5(): String? = title
    override fun component6(): Int? = publishedIn
    override fun component7(): Int? = languageId
    override fun component8(): String? = contentText
    override fun component9(): ByteArray? = contentPdf
    override fun component10(): Int? = recVersion
    override fun component11(): LocalDateTime? = recTimestamp
    override fun value1(): Int? = id
    override fun value2(): Int? = authorId
    override fun value3(): Int? = coAuthorId
    override fun value4(): Int? = detailsId
    override fun value5(): String? = title
    override fun value6(): Int? = publishedIn
    override fun value7(): Int? = languageId
    override fun value8(): String? = contentText
    override fun value9(): ByteArray? = contentPdf
    override fun value10(): Int? = recVersion
    override fun value11(): LocalDateTime? = recTimestamp

    override fun value1(value: Int?): BookRecord {
        this.id = value
        return this
    }

    override fun value2(value: Int?): BookRecord {
        this.authorId = value
        return this
    }

    override fun value3(value: Int?): BookRecord {
        this.coAuthorId = value
        return this
    }

    override fun value4(value: Int?): BookRecord {
        this.detailsId = value
        return this
    }

    override fun value5(value: String?): BookRecord {
        this.title = value
        return this
    }

    override fun value6(value: Int?): BookRecord {
        this.publishedIn = value
        return this
    }

    override fun value7(value: Int?): BookRecord {
        this.languageId = value
        return this
    }

    override fun value8(value: String?): BookRecord {
        this.contentText = value
        return this
    }

    override fun value9(value: ByteArray?): BookRecord {
        this.contentPdf = value
        return this
    }

    override fun value10(value: Int?): BookRecord {
        this.recVersion = value
        return this
    }

    override fun value11(value: LocalDateTime?): BookRecord {
        this.recTimestamp = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: Int?, value5: String?, value6: Int?, value7: Int?, value8: String?, value9: ByteArray?, value10: Int?, value11: LocalDateTime?): BookRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        return this
    }

    /**
     * Create a detached, initialised BookRecord
     */
    constructor(id: Int? = null, authorId: Int? = null, coAuthorId: Int? = null, detailsId: Int? = null, title: String? = null, publishedIn: Int? = null, languageId: Int? = null, contentText: String? = null, contentPdf: ByteArray? = null, recVersion: Int? = null, recTimestamp: LocalDateTime? = null): this() {
        this.id = id
        this.authorId = authorId
        this.coAuthorId = coAuthorId
        this.detailsId = detailsId
        this.title = title
        this.publishedIn = publishedIn
        this.languageId = languageId
        this.contentText = contentText
        this.contentPdf = contentPdf
        this.recVersion = recVersion
        this.recTimestamp = recTimestamp
    }
}
